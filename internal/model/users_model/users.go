///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package users_model

import (
	"fmt"
	"time"

	"fwds/internal/model"

	"github.com/gin-gonic/gin"
	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Users {
	return new(Users)
}

func NewQueryBuilder(ctx *gin.Context) *usersModelQueryBuilder {
	return &usersModelQueryBuilder{
		ctx: ctx,
	}
}

func (t *Users) Create(db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type usersModelQueryBuilder struct {
	ctx   *gin.Context
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *usersModelQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset).WithContext(qb.ctx)
	return ret
}

func (qb *usersModelQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Users{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *usersModelQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Users{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *usersModelQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Users{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *usersModelQueryBuilder) First(db *gorm.DB) (*Users, error) {
	ret := &Users{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *usersModelQueryBuilder) QueryOne(db *gorm.DB) (*Users, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *usersModelQueryBuilder) QueryAll(db *gorm.DB) ([]*Users, error) {
	var ret []*Users
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *usersModelQueryBuilder) Limit(limit int) *usersModelQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *usersModelQueryBuilder) Offset(offset int) *usersModelQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *usersModelQueryBuilder) WhereId(p model.Predicate, value int64) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ids", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereIdIn(value []int64) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ids", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereIdNotIn(value []int64) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "ids", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderById(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "ids "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereUsername(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "usernames", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereUsernameIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "usernames", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereUsernameNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "usernames", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByUsername(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "usernames "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WherePassword(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "passwords", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WherePasswordIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "passwords", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WherePasswordNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "passwords", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByPassword(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "passwords "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereNickname(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nicknames", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereNicknameIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nicknames", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereNicknameNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nicknames", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByNickname(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "nicknames "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereEmail(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereEmailIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "emails", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereEmailNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "emails", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByEmail(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "emails "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WherePhone(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phones", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WherePhoneIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phones", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WherePhoneNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phones", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByPhone(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "phones "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereAvatar(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatars", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereAvatarIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatars", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereAvatarNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "avatars", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByAvatar(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "avatars "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereBio(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bios", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereBioIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bios", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereBioNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "bios", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByBio(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "bios "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereAddress(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "addresses", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereAddressIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "addresses", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereAddressNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "addresses", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByAddress(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "addresses "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereJob(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "jobs", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereJobIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "jobs", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereJobNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "jobs", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByJob(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "jobs "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereSalt(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "salts", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereSaltIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "salts", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereSaltNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "salts", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderBySalt(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "salts "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereUuid(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uuids", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereUuidIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uuids", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereUuidNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uuids", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByUuid(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "uuids "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereLastIp(p model.Predicate, value string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_ips", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereLastIpIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_ips", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereLastIpNotIn(value []string) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_ips", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByLastIp(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "last_ips "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereLastLoginTime(p model.Predicate, value time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_login_times", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereLastLoginTimeIn(value []time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_login_times", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereLastLoginTimeNotIn(value []time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "last_login_times", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByLastLoginTime(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "last_login_times "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereType(p model.Predicate, value int32) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "types", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereTypeIn(value []int32) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "types", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereTypeNotIn(value []int32) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "types", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByType(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "types "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereStatus(p model.Predicate, value int32) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "statuses", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereStatusIn(value []int32) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "statuses", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereStatusNotIn(value []int32) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "statuses", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByStatus(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "statuses "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereDeletedAt(p model.Predicate, value time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_ats", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereDeletedAtIn(value []time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_ats", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_ats", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByDeletedAt(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "deleted_ats "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereCreatedAt(p model.Predicate, value time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_ats", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereCreatedAtIn(value []time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_ats", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_ats", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByCreatedAt(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_ats "+order)
	return qb
}

func (qb *usersModelQueryBuilder) WhereUpdatedAt(p model.Predicate, value time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_ats", p),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereUpdatedAtIn(value []time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_ats", "IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *usersModelQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_ats", "NOT IN"),
		value,
	})
	return qb
}

func (qb *usersModelQueryBuilder) OrderByUpdatedAt(asc bool) *usersModelQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_ats "+order)
	return qb
}
